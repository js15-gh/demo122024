name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-west1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        pytest tests/

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    permissions:
      contents: 'read'
      id-token: 'write'
    
    outputs:
      staging_status: ${{ steps.deploy-staging.outputs.status }}
      image_tag: ${{ steps.build.outputs.image_tag }}
    
    steps:
    - uses: actions/checkout@v3

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: '${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}'
        service_account: 'github-actions@demo122024.iam.gserviceaccount.com'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: Configure Docker
      run: |
        gcloud auth configure-docker

    - name: Build and Push
      id: build
      run: |
        IMAGE_TAG="${{ github.sha }}"
        docker build -t gcr.io/$PROJECT_ID/demo-app:$IMAGE_TAG .
        docker push gcr.io/$PROJECT_ID/demo-app:$IMAGE_TAG
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Deploy to Staging
      id: deploy-staging
      run: |
        echo "Deploying to staging environment..."
        if gcloud run deploy demo-service-staging \
          --image gcr.io/$PROJECT_ID/demo-app:${{ github.sha }} \
          --platform managed \
          --region $GCP_REGION \
          --allow-unauthenticated; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Test Staging Deployment
      id: test-staging
      run: |
        STAGING_URL=$(gcloud run services describe demo-service-staging --platform managed --region $GCP_REGION --format 'value(status.url)')
        # Wait for service to be ready
        sleep 30
        # Test the endpoint
        if curl -s -f -o /dev/null "$STAGING_URL/health"; then
          echo "Staging deployment health check passed"
        else
          echo "Staging deployment health check failed"
          exit 1
        fi

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
    - uses: actions/checkout@v3

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: '${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}'
        service_account: 'github-actions@demo122024.iam.gserviceaccount.com'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: Get Previous Production Image
      id: get-prev-image
      run: |
        PREV_IMAGE=$(gcloud run services describe demo-service-prod --platform managed --region $GCP_REGION --format 'value(spec.template.spec.containers[0].image)')
        echo "prev_image=$PREV_IMAGE" >> $GITHUB_OUTPUT

    - name: Deploy to Production
      id: deploy-prod
      run: |
        echo "Deploying to production environment..."
        if gcloud run deploy demo-service-prod \
          --image gcr.io/$PROJECT_ID/demo-app:${{ needs.deploy-staging.outputs.image_tag }} \
          --platform managed \
          --region $GCP_REGION \
          --allow-unauthenticated; then
          echo "Production deployment successful"
        else
          echo "Production deployment failed, rolling back..."
          gcloud run deploy demo-service-prod \
            --image ${{ steps.get-prev-image.outputs.prev_image }} \
            --platform managed \
            --region $GCP_REGION \
            --allow-unauthenticated
          echo "::error::Production deployment failed. Rolled back to previous version."
          exit 1
        fi

    - name: Test Production Deployment
      id: test-prod
      run: |
        PROD_URL=$(gcloud run services describe demo-service-prod --platform managed --region $GCP_REGION --format 'value(status.url)')
        # Wait for service to be ready
        sleep 30
        # Test the endpoint
        if curl -s -f -o /dev/null "$PROD_URL/health"; then
          echo "Production deployment health check passed"
        else
          echo "Production deployment health check failed"
          # Trigger rollback
          gcloud run deploy demo-service-prod \
            --image ${{ steps.get-prev-image.outputs.prev_image }} \
            --platform managed \
            --region $GCP_REGION \
            --allow-unauthenticated
          echo "::error::Production health check failed. Rolled back to previous version."
          exit 1
        fi
