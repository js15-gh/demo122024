name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-west1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        python -m pytest tests/

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    environment: staging
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v0
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
    
    - name: Docker Auth
      run: |
        gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev
    
    - name: Build and Push Container
      run: |
        docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/demo-app/api:${{ github.sha }} .
        docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/demo-app/api:${{ github.sha }}
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy demo-app-staging \
          --image ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/demo-app/api:${{ github.sha }} \
          --region ${{ env.GCP_REGION }} \
          --platform managed \
          --allow-unauthenticated

    - name: Run Integration Tests in Staging
      env:
        API_URL: ${{ steps.deploy.outputs.url }}
      run: |
        python -m pip install -r requirements.txt
        export TEST_ENV=staging
        python -m pytest tests/integration/

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v0
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
    
    - name: Docker Auth
      run: |
        gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev
    
    - name: Deploy to Cloud Run
      id: deploy
      run: |
        gcloud run deploy demo-app-prod \
          --image ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/demo-app/api:${{ github.sha }} \
          --region ${{ env.GCP_REGION }} \
          --platform managed \
          --allow-unauthenticated
    
    - name: Health Check
      run: |
        DEPLOY_URL=$(gcloud run services describe demo-app-prod --region ${{ env.GCP_REGION }} --format 'value(status.url)')
        MAX_RETRIES=5
        COUNT=0
        echo "Checking health endpoint at $DEPLOY_URL/health"
        while [ $COUNT -lt $MAX_RETRIES ]; do
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $DEPLOY_URL/health)
          if [ $HTTP_STATUS == "200" ]; then
            echo "Health check passed!"
            exit 0
          fi
          echo "Attempt $COUNT: Health check failed with status $HTTP_STATUS. Retrying..."
          COUNT=$((COUNT + 1))
          sleep 10
        done
        echo "Health check failed after $MAX_RETRIES attempts"
        exit 1

    - name: Rollback on Failure
      if: failure()
      run: |
        # Get the previous successful version
        PREV_VERSION=$(gcloud run revisions list --service demo-app-prod --region ${{ env.GCP_REGION }} --format="get(metadata.name)" --limit=2 | grep -v ${{ github.sha }} | head -1)
        if [ ! -z "$PREV_VERSION" ]; then
          echo "Rolling back to version $PREV_VERSION"
          gcloud run services update-traffic demo-app-prod --region ${{ env.GCP_REGION }} --to-revisions=$PREV_VERSION=100
        fi
